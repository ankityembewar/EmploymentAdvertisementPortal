"use strict";import DotPlotSeriesDefaults from"./DotPlotSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const ColumnSeries=SeriesRegistry.seriesTypes["column"];import U from"../../Core/Utilities.js";const{extend,merge,pick}=U;class DotPlotSeries extends ColumnSeries{drawPoints(){const n=this,t=n.options,a=n.chart.renderer,p=t.marker,c=n.yAxis.transA*t.itemPadding,e=n.borderWidth,h=e%2?.5:1;for(const f of n.points){var m=f.marker||{},u=m.symbol||p.symbol,y=pick(m.radius,p.radius),S="rect"!==u;let r,i,s,o,t,l,d;f.graphics=s=f.graphics||[];const g=f.pointAttr?f.pointAttr[f.selected?"selected":""]||n.pointAttr[""]:n.pointAttribs(f,f.selected&&"select");if(delete g.r,n.chart.styledMode&&(delete g.stroke,delete g["stroke-width"]),null!==f.y){f.graphic||(f.graphic=a.g("point").add(n.group)),t=pick(f.stackY,f.y),o=Math.min(f.pointWidth,n.yAxis.transA-c);let e=Math.floor(t);for(r=t;r>t-f.y;r--,e--){l=f.barX+(S?f.pointWidth/2-o/2:0),d=n.yAxis.toPixels(r,!0)+c/2,n.options.crisp&&(l=Math.round(l)-h,d=Math.round(d)+h),i={x:l,y:d,width:Math.round(S?o:f.pointWidth),height:Math.round(o),r:y};let t=s[e];t?t.animate(i):t=a.symbol(u).attr(extend(i,g)).add(f.graphic),t.isActive=!0,s[e]=t}}let e=-1;for(const A of s)++e,A&&(A.isActive?A.isActive=!1:(A.destroy(),s.splice(e,1)))}}}DotPlotSeries.defaultOptions=merge(ColumnSeries.defaultOptions,DotPlotSeriesDefaults),extend(DotPlotSeries.prototype,{markerAttribs:void 0}),SeriesRegistry.registerSeriesType("dotplot",DotPlotSeries);export default DotPlotSeries;