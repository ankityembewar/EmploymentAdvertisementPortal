"use strict";import BubbleLegendComposition from"./BubbleLegendComposition.js";import BubblePoint from"./BubblePoint.js";import Color from"../../Core/Color/Color.js";const color=Color["parse"];import H from"../../Core/Globals.js";const{composed,noop}=H;import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{series:Series,seriesTypes:{column:{prototype:columnProto},scatter:ScatterSeries}}=SeriesRegistry;import U from"../../Core/Utilities.js";const{addEvent,arrayMax,arrayMin,clamp,extend,isNumber,merge,pick,pushUnique}=U;function onAxisFoundExtremes(){const e=this.len,{coll:t,isXAxis:r,min:a}=this,o=r?"xData":"yData",n=(this.max||0)-(a||0);let l=0,h=e,m=e/n,p;"xAxis"!==t&&"yAxis"!==t||(this.series.forEach(t=>{if(t.bubblePadding&&t.reserveSpace()){this.allowZoomOutside=!0,p=!0;var i,s=t[o];if(r&&((t.onPoint||t).getRadii(0,0,t),t.onPoint&&(t.radii=t.onPoint.radii)),0<n){let e=s.length;for(;e--;)isNumber(s[e])&&this.dataMin<=s[e]&&s[e]<=this.max&&(i=t.radii&&t.radii[e]||0,l=Math.min((s[e]-a)*m-i,l),h=Math.max((s[e]-a)*m+i,h))}}}),p&&0<n&&!this.logarithmic&&(h-=e,m*=(e+Math.max(0,l)-Math.min(h,e))/e,[["min","userMin",l],["max","userMax",h]].forEach(e=>{void 0===pick(this.options[e[0]],this[e[1]])&&(this[e[0]]+=e[2]/m)})))}class BubbleSeries extends ScatterSeries{static compose(e,t,i,s){BubbleLegendComposition.compose(t,i,s),pushUnique(composed,"Series.Bubble")&&addEvent(e,"foundExtremes",onAxisFoundExtremes)}animate(e){!e&&this.points.length<this.options.animationLimit&&this.points.forEach(function(e){const t=e["graphic"];t&&t.width&&(this.hasRendered||t.attr({x:e.plotX,y:e.plotY,width:1,height:1}),t.animate(this.markerAttribs(e),this.options.animation))},this)}getRadii(){const e=this.zData,t=this.yData,i=[];let s,r,a,o=this.chart.bubbleZExtremes;var{minPxSize:n,maxPxSize:l}=this.getPxExtremes();if(!o){let t=Number.MAX_VALUE,i=-Number.MAX_VALUE,s;this.chart.series.forEach(e=>{e.bubblePadding&&e.reserveSpace()&&((e=(e.onPoint||e).getZExtremes())&&(t=Math.min(pick(t,e.zMin),e.zMin),i=Math.max(pick(i,e.zMax),e.zMax),s=!0))}),s?(o={zMin:t,zMax:i},this.chart.bubbleZExtremes=o):o={zMin:0,zMax:0}}for(r=0,s=e.length;r<s;r++)a=e[r],i.push(this.getRadius(o.zMin,o.zMax,n,l,a,t&&t[r]));this.radii=i}getRadius(e,t,i,s,r,a){var o=this.options,n="width"!==o.sizeBy,l=o.zThreshold;let h=t-e,m=.5;if(null===a||null===r)return null;if(isNumber(r)){if(o.sizeByAbsoluteValue&&(r=Math.abs(r-l),t=h=Math.max(t-l,Math.abs(e-l)),e=0),r<e)return i/2-1;0<h&&(m=(r-e)/h)}return n&&0<=m&&(m=Math.sqrt(m)),Math.ceil(i+m*(s-i))/2}hasData(){return!!this.processedXData.length}pointAttribs(e,t){const i=this.options.marker,s=i.fillOpacity,r=Series.prototype.pointAttribs.call(this,e,t);return 1!==s&&(r.fill=color(r.fill).setOpacity(s).get("rgba")),r}translate(){super.translate.call(this),this.getRadii(),this.translateBubble()}translateBubble(){var{data:e,options:t,radii:i}=this,s=this.getPxExtremes()["minPxSize"];let r=e.length;for(;r--;){const o=e[r];var a=i?i[r]:0;"z"===this.zoneAxis&&(o.negative=(o.z||0)<(t.zThreshold||0)),isNumber(a)&&s/2<=a?(o.marker=extend(o.marker,{radius:a,width:2*a,height:2*a}),o.dlBox={x:o.plotX-a,y:o.plotY-a,width:2*a,height:2*a}):(o.shapeArgs=o.plotY=o.dlBox=void 0,o.isInside=!1)}}getPxExtremes(){const i=Math.min(this.chart.plotWidth,this.chart.plotHeight);var e=e=>{let t;return"string"==typeof e&&(t=/%$/.test(e),e=parseInt(e,10)),t?i*e/100:e},t=e(pick(this.options.minSize,8));return{minPxSize:t,maxPxSize:Math.max(e(pick(this.options.maxSize,"20%")),t)}}getZExtremes(){var e=this.options,t=(this.zData||[]).filter(isNumber);if(t.length){var i=pick(e.zMin,clamp(arrayMin(t),!1===e.displayNegative?e.zThreshold||0:-Number.MAX_VALUE,Number.MAX_VALUE)),e=pick(e.zMax,arrayMax(t));if(isNumber(i)&&isNumber(e))return{zMin:i,zMax:e}}}}BubbleSeries.defaultOptions=merge(ScatterSeries.defaultOptions,{dataLabels:{formatter:function(){const e=this.series.chart["numberFormatter"];var t=this.point["z"];return isNumber(t)?e(t,-1):""},inside:!0,verticalAlign:"middle"},animationLimit:250,marker:{lineColor:null,lineWidth:1,fillOpacity:.5,radius:null,states:{hover:{radiusPlus:0}},symbol:"circle"},minSize:8,maxSize:"20%",softThreshold:!1,states:{hover:{halo:{size:5}}},tooltip:{pointFormat:"({point.x}, {point.y}), Size: {point.z}"},turboThreshold:0,zThreshold:0,zoneAxis:"z"}),extend(BubbleSeries.prototype,{alignDataLabel:columnProto.alignDataLabel,applyZones:noop,bubblePadding:!0,isBubble:!0,pointArrayMap:["y","z"],pointClass:BubblePoint,parallelArrays:["x","y","z"],trackerGroups:["group","dataLabelsGroup"],specialGroup:"group",zoneAxis:"z"}),addEvent(BubbleSeries,"updatedData",e=>{delete e.target.chart.bubbleZExtremes}),addEvent(BubbleSeries,"remove",e=>{delete e.target.chart.bubbleZExtremes}),SeriesRegistry.registerSeriesType("bubble",BubbleSeries);export default BubbleSeries;