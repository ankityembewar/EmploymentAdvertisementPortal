"use strict";import H from"../../Core/Globals.js";import NodesComposition from"../NodesComposition.js";import SankeyPoint from"./SankeyPoint.js";import SankeySeriesDefaults from"./SankeySeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import SankeyColumnComposition from"./SankeyColumnComposition.js";const{column:ColumnSeries,line:LineSeries}=SeriesRegistry.seriesTypes;import Color from"../../Core/Color/Color.js";const color=Color["parse"];import TU from"../TreeUtilities.js";const{getLevelOptions,getNodeWidth}=TU;import U from"../../Core/Utilities.js";const{clamp,extend,isObject,merge,pick,relativeLength,stableSort}=U;class SankeySeries extends ColumnSeries{static getDLOptions(o){var e=isObject(o.optionsPoint)?o.optionsPoint.dataLabels:{},o=isObject(o.level)?o.level.dataLabels:{};return merge({style:{}},o,e)}createNodeColumns(){const e=[];for(const o of this.nodes)o.setNodeColumn(),e[o.column]||(e[o.column]=SankeyColumnComposition.compose([],this)),e[o.column].push(o);for(let o=0;o<e.length;o++)void 0===e[o]&&(e[o]=SankeyColumnComposition.compose([],this));return e}order(o,e){if(void 0===o.level){o.level=e;for(const t of o.linksFrom)t.toNode&&this.order(t.toNode,e+1)}}generatePoints(){if(NodesComposition.generatePoints.apply(this,arguments),this.orderNodes){for(const o of this.nodes)0===o.linksTo.length&&this.order(o,0);stableSort(this.nodes,(o,e)=>o.level-e.level)}}getNodePadding(){let o=this.options.nodePadding||0;var e;return o=this.nodeColumns&&(e=this.nodeColumns.reduce((o,e)=>Math.max(o,e.length),0))*o>this.chart.plotSizeY?this.chart.plotSizeY/e:o}hasData(){return!!this.processedXData.length}pointAttribs(o,e){if(!o)return{};const t=this,i=(o.isNode?o:o.fromNode).level,s=t.mapOptionsToLevel[i||0]||{},r=o.options,n=s.states&&s.states[e||""]||{},l=["colorByPoint","borderColor","borderWidth","linkOpacity","opacity"].reduce((o,e)=>(o[e]=pick(n[e],r[e],s[e],t.options[e]),o),{}),a=pick(n.color,r.color,(l.colorByPoint?o:s).color);return o.isNode?{fill:a,stroke:l.borderColor,"stroke-width":l.borderWidth,opacity:l.opacity}:{fill:Color.parse(a).setOpacity(l.linkOpacity).get()}}drawTracker(){ColumnSeries.prototype.drawTracker.call(this,this.points),ColumnSeries.prototype.drawTracker.call(this,this.nodes)}drawPoints(){ColumnSeries.prototype.drawPoints.call(this,this.points),ColumnSeries.prototype.drawPoints.call(this,this.nodes)}drawDataLabels(){ColumnSeries.prototype.drawDataLabels.call(this,this.points),ColumnSeries.prototype.drawDataLabels.call(this,this.nodes)}translate(){this.processedXData||this.processData(),this.generatePoints(),this.nodeColumns=this.createNodeColumns();const t=this,o=this.chart,e=this.options,i=this.nodeColumns,s=i.length;this.nodeWidth=getNodeWidth(this,s),this.nodePadding=this.getNodePadding(),this.translationFactor=i.reduce((o,e)=>Math.min(o,e.sankeyColumn.getTranslationFactor(t)),1/0),this.colDistance=(o.plotSizeX-this.nodeWidth-e.borderWidth)/Math.max(1,i.length-1),t.mapOptionsToLevel=getLevelOptions({from:1,levels:e.levels,to:i.length-1,defaults:{borderColor:e.borderColor,borderRadius:e.borderRadius,borderWidth:e.borderWidth,color:t.color,colorByPoint:e.colorByPoint,levelIsConstant:!0,linkColor:e.linkColor,linkLineWidth:e.linkLineWidth,linkOpacity:e.linkOpacity,states:e.states}});for(const r of i)for(const n of r)t.translateNode(n,r);for(const l of this.nodes)for(const a of l.linksFrom)(a.weight||a.isNull)&&a.to&&(t.translateLink(a),a.allowShadow=!1)}translateLink(t){var o,e,i,s,r,n,l,a,d,h,p,c,m,y,u,C,S,g,f=(o,e)=>{e=o.offset(t,e)*N;return Math.min(o.nodeY+e,o.nodeY+(o.shapeArgs&&o.shapeArgs.height||0)-M)};const k=t.fromNode,v=t.toNode,L=this.chart,b=L["inverted"],N=this.translationFactor,P=this.options,w=pick(t.linkColorMode,P.linkColorMode),x=(L.inverted?-this.colDistance:this.colDistance)*P.curveFactor,O=k.nodeX,T=v.nodeX,D=t.outgoing;let M=Math.max(t.weight*N,this.options.minLinkWidth),W=f(k,"linksFrom"),j=f(v,"linksTo"),z=this.nodeWidth,Y=T>O+z;L.inverted&&(W=L.plotSizeY-W,j=(L.plotSizeY||0)-j,z=-z,M=-M,Y=T<O),t.shapeType="path",t.linkBase=[W,W+M,j,j+M],Y&&"number"==typeof j?t.shapeArgs={d:[["M",O+z,W],["C",O+z+x,W,T-x,j,T,j],["L",T+(D?z:0),j+M/2],["L",T,j+M],["C",T-x,j+M,O+z+x,W+M,O+z,W+M],["Z"]]}:"number"==typeof j&&(f=L.plotHeight-W-M,o=T-20-M,e=T-20,r=(s=(i=O+z)+20)+M,d=(a=(f=(l=(n=(S=W)+M)+20)+f)+20)+M,c=(p=(h=j)+M)+20,g=n-.7*M,m=a+.7*M,y=p-.7*M,u=T-.7*M,C=i+.7*M,t.shapeArgs={d:[["M",i,S],["C",C,S,r,g,r,l],["L",r,f],["C",r,m,C,d,i,d],["L",T,d],["C",u,d,o,m,o,f],["L",o,c],["C",o,y,u,h,T,h],["L",T,p],["C",e,p,e,p,e,c],["L",e,f],["C",e,a,e,a,T,a],["L",i,a],["C",s,a,s,a,s,f],["L",s,l],["C",s,n,s,n,i,n],["Z"]]}),t.dlBox={x:O+(T-O+z)/2,y:W+(j-W)/2,height:M,width:0},t.tooltipPos=L.inverted?[L.plotSizeY-t.dlBox.y-M/2,L.plotSizeX-t.dlBox.x]:[t.dlBox.x,t.dlBox.y+M/2],t.y=t.plotY=1,t.x=t.plotX=1,t.options.color||("from"===w?t.color=k.color:"to"===w?t.color=v.color:"gradient"===w&&(S=color(k.color).get(),g=color(v.color).get(),t.color={linearGradient:{x1:1,x2:0,y1:0,y2:0},stops:[[0,b?S:g],[1,b?g:S]]}))}translateNode(s,r){var o=this.translationFactor,n=this.chart,l=this.options,{borderRadius:a,borderWidth:d=0}=l,e=s.getSum(),h=Math.max(Math.round(e*o),this.options.minLinkWidth),p=Math.round(this.nodeWidth),t=Math.round(d)%2/2,c=r.sankeyColumn.offset(s,o),r=Math.floor(pick(c.absoluteTop,r.sankeyColumn.top(o)+c.relativeTop))+t,o=Math.floor(this.colDistance*s.column+d/2)+relativeLength(s.options[n.inverted?"offsetVertical":"offsetHorizontal"]||0,p)+t,c=n.inverted?n.plotSizeX-o:o;if(s.sum=e){s.shapeType="roundedRect";let o=s.nodeX=c,e=s.nodeY=r,t=s.options.width||l.width||p,i=s.options.height||l.height||h;d=clamp(relativeLength("object"==typeof a?a.radius:a||0,t),0,h/2);n.inverted&&(o=c-p,e=n.plotSizeY-r-h,t=s.options.height||l.height||p,i=s.options.width||l.width||h),s.dlOptions=SankeySeries.getDLOptions({level:this.mapOptionsToLevel[s.level],optionsPoint:s.options}),s.plotX=1,s.plotY=1,s.tooltipPos=n.inverted?[n.plotSizeY-e-i/2,n.plotSizeX-o-t/2]:[o+t/2,e+i/2],s.shapeArgs={x:o,y:e,width:t,height:i,r:d,display:s.hasShape()?"":"none"}}else s.dlOptions={enabled:!1}}}SankeySeries.defaultOptions=merge(ColumnSeries.defaultOptions,SankeySeriesDefaults),NodesComposition.compose(SankeyPoint,SankeySeries),extend(SankeySeries.prototype,{animate:LineSeries.prototype.animate,createNode:NodesComposition.createNode,forceDL:!0,invertible:!0,isCartesian:!1,orderNodes:!0,noSharedTooltip:!0,pointArrayMap:["from","to","weight"],pointClass:SankeyPoint,searchPoint:H.noop}),SeriesRegistry.registerSeriesType("sankey",SankeySeries);export default SankeySeries;